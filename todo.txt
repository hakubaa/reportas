- recognition of unit money
- check errors and warnings for reports listed in fields_identification.py
- web-based interface for uploaindg report (validation)
- web-crawler for searching pdf/zip files wtih financial reports
- reports blueprint:
  - reports/ - reports browser - GET - show reports POST - upload report
  - reports/<id> - report detail
  - reports/parser - parsing new reports - user interaction
  - reports/upload_file - upload new report (POST) or reports/ - POST

- FinancialReport: errors when no nls, cfs or bls detected

- versining dataset
  - https://stackoverflow.com/questions/2015232/database-design-for-audit-logging
  - http://blog.jasny.net/articles/versioning-mysql-data/


- Sunday:
  - transition from dbrequest to records in db
  - history of changes
  - 'many' in query_parameters

versioning Objects with History Table: 
http://docs.sqlalchemy.org/en/latest/orm/examples.html <- try this at home

What next?

- rapi for identifying records/parsing text /api/parser?type=text/file
- refactor UI panel for parsing text (angular - one more time)
- panels for updating data - in every possible case

- algorithm for creating new formulas on the base of existing ones (reversed formulas)
- algorithm for creating sintetic records (on the base of other records in accordance
  with defined formulas and on the base of data from different timeranges and timestamps)



openstock.com (Open Stock)

- Baza danych (dbmp - database management panel)
    - API + Opis API
    - Zardządzanie danymi (wgrywanie, usuwanie, modifikacja)
    - Przeglądanie bazy danych
    - Pobieranie danych z bazy (csv, txt)
    - Parser do raportów
- Panel analityczny (analytics)
    - Analiza danych finansowych
    - Wskaźniki finansowe
    - Przygotowywanie analiz w ujęci jednospółkowym oraz analizy porównawncze
    - Wyszukiwanie spółek spełniających zawiłe kryteria (np. nieprzerwany wzrost
        sprzedaży w ostatnich 5 kwartałach)
    - Panel do tworzenia analiz, które będą mogły być później opublikowane w
      'Raporty & Analizy' według określonych schematów. 
- Raport & Analizy (analyses)
- Twój portfel (portfolio)



RecordFormula:
- calculate (instance method)
    - accepts Records and returns new Record calculated in accordance with formulas
    - records must encompass the same timerange and end at the same timestamp
    - returns None, when it was not possible
- transform/derive (instance method)
    - create new formula which explain given component
- classmethod for looking for formulas to calculate specific fields
- how to represent formula uniqness (unique left side and right side)
- formula trace (unambiguous identification of formula) - update with ORM Events

Function which acceps timestamp, timerange, type of record and try to calculate Record it
regardless of the method.




- create separate model for sector - Sector
	- many-to-many relation with companies, which can operatoe in many secots
- create separate model for country - Country
	- filter companies by country
- create separate model for district - District
	- filter companies by distirct
- create spearate model for stock exchanges - StockExchange (eg. Warsaw Stock Exchange)
	- companies can be lisited on many stocks simulataneously
- create separate models for macroeconomic data
	- similar as in case of Records (but to keep macreoconomic data)
	- relation with countries or entities (e.g. European Union)
	- it will be very helpful when developming predictive models


- Flask-WhooshAlchemy for indexing models
	- https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-x-full-text-search


- split data into different categories: 
	- Financial Data
		- Records
		- Record Types
			- Record Type Reprs
			- Formulas
		- Reports
	- Macroeconomic Data
	- Stock Exchange Quotations
	- Geographic Data
		- Countires
		- Districts
	- Companies
		- Companies
			- Company Reprs
		- Sectors


- create abstract classes on the base of Django-Class base views:
	- SingleObjectMixin
	- ListView
	- DetailView
	- EditView
	- CreateView
	- UpdateView
	- DeleteView
		- can show also list of related collections (e.g. representations of companies)
		  with edit and delete buttons




11.07.2017

- to do
    - compare ma.ModelSchema with ModelSchema from sqlalchemy_marshmallow
        - if ok move schemas to db
        - if ok move DBRecordFactory to db
        
- done
    - create DBRecordFactory (app/factories.py)
    - write tests for DBRecordFActory (app/test_factories.py)
    
    


- to create nested forms one have to define additional models in inline_models
    - how to add related model to model that do not exist
    - there should be relation between dbrequests and models, polimorphic
        relation is required (possible?)
    - dependent request - request which execution depends on the execution
        of other request (parent request)
        
        Example:
        
        User actions:
        1. User makes request to create record type.
        2. User adds several representation for defined record type (each 
           representation is send via separate request).
          
        Moderator actions: 
        1. Moderator opens request for creation of record type.
        2. Moderator sees request concerning creation of record type as well
           as all related requests.
        3. Moderator can rejecte selected dependent request what does not mean 
           he will reject the parent request.
        4. Moderator accept the request.
        
        Server actions:
        1. Server executes the requst.
        2. Srrver creates the main object - RecordType.
        3. Server executes dependent requests. Server modifieds data in each
           request in accordance with defined relation between created models.
        4. Server recognize relation on it's own. Analyse the relations between
           models. If there is no relation nothing is going to change. When
           there is a relation additional acctions are taking place. 
        5. There will be only many-to-one relation at the beginning. Do not know
           whether other type of relations are required.
        6. Great - write tests for this.
        7. In main panel show only main requests (those without defined parent
           request).
           
        Super!!! Write tests!!!
        - I need factory: session,
        - two methods: create, update
        
        
- move schemas to db
- serializers

