TO_DO:
- synthetic records should be overriden manually

DONE:
- create synthetic records for financial recordfs of ics/cfs and bls
- Record.project_onto_fiscal_year will decide how to project bls and ics/cfs
- update synthetic records (when updating new field)
- delete syntehtic records ? - no, only manually
- timestamp, only years and months in tools
- add warnings and errors when uploading data with tools
- units of measure

################################################################################

TO DO:
- parser
    - refactor and write tests
    - ui in dbmd
- models: sector, country, district, index
- syntetic records
- uploading files in reports (in record view)
- dbmd tools:
  - parser
  - batch uploader


- recognition of unit money
- check errors and warnings for reports listed in fields_identification.py
- web-based interface for uploaindg report (validation)
- web-crawler for searching pdf/zip files wtih financial reports
- reports blueprint:
  - reports/ - reports browser - GET - show reports POST - upload report
  - reports/<id> - report detail
  - reports/parser - parsing new reports - user interaction
  - reports/upload_file - upload new report (POST) or reports/ - POST

- FinancialReport: errors when no nls, cfs or bls detected

- versining dataset
  - https://stackoverflow.com/questions/2015232/database-design-for-audit-logging
  - http://blog.jasny.net/articles/versioning-mysql-data/


- Sunday:
  - transition from dbrequest to records in db
  - history of changes
  - 'many' in query_parameters

versioning Objects with History Table: 
http://docs.sqlalchemy.org/en/latest/orm/examples.html <- try this at home

What next?

- rapi for identifying records/parsing text /api/parser?type=text/file
- refactor UI panel for parsing text (angular - one more time)
- panels for updating data - in every possible case

- algorithm for creating new formulas on the base of existing ones (reversed formulas)
- algorithm for creating sintetic records (on the base of other records in accordance
  with defined formulas and on the base of data from different timeranges and timestamps)



openstock.com (Open Stock)

- Baza danych (dbmp - database management panel)
    - API + Opis API
    - Zardządzanie danymi (wgrywanie, usuwanie, modifikacja)
    - Przeglądanie bazy danych
    - Pobieranie danych z bazy (csv, txt)
    - Parser do raportów
- Panel analityczny (analytics)
    - Analiza danych finansowych
    - Wskaźniki finansowe
    - Przygotowywanie analiz w ujęci jednospółkowym oraz analizy porównawncze
    - Wyszukiwanie spółek spełniających zawiłe kryteria (np. nieprzerwany wzrost
        sprzedaży w ostatnich 5 kwartałach)
    - Panel do tworzenia analiz, które będą mogły być później opublikowane w
      'Raporty & Analizy' według określonych schematów. 
- Raport & Analizy (analyses)
- Twój portfel (portfolio)



RecordFormula:
- calculate (instance method)
    - accepts Records and returns new Record calculated in accordance with formulas
    - records must encompass the same timerange and end at the same timestamp
    - returns None, when it was not possible
- transform/derive (instance method)
    - create new formula which explain given component
- classmethod for looking for formulas to calculate specific fields
- how to represent formula uniqness (unique left side and right side)
- formula trace (unambiguous identification of formula) - update with ORM Events

Function which acceps timestamp, timerange, type of record and try to calculate Record it
regardless of the method.




- create separate model for sector - Sector
	- many-to-many relation with companies, which can operatoe in many secots
- create separate model for country - Country
	- filter companies by country
- create separate model for district - District
	- filter companies by distirct
- create spearate model for stock exchanges - StockExchange (eg. Warsaw Stock Exchange)
	- companies can be lisited on many stocks simulataneously
- create separate models for macroeconomic data
	- similar as in case of Records (but to keep macreoconomic data)
	- relation with countries or entities (e.g. European Union)
	- it will be very helpful when developming predictive models


- Flask-WhooshAlchemy for indexing models
	- https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-x-full-text-search


- split data into different categories: 
	- Financial Data
		- Records
		- Record Types
			- Record Type Reprs
			- Formulas
		- Reports
	- Macroeconomic Data
	- Stock Exchange Quotations
	- Geographic Data
		- Countires
		- Districts
	- Companies
		- Companies
			- Company Reprs
		- Sectors


30.07.2017:

- format select2 in ics/cfs/bls-table
- add repr for dbrequest

- clicalbke records in mainer: scroll to table with records and backward
- show comunicate when table is empty or table-content is empty
- update pdf_file_miner with improvements from direct_input_miner
- try to create some layer of abstraction for miners



Działalność kontynuowana
Przychody                                                                           47 086               49 384
                                                                2
Przychody netto ze sprzedaży produktów i usług                                      26 820               26 446

                                                                2
Przychody netto ze sprzedaży towarów i materiałów                                   20 266               22 938

Koszty własny sprzedaży                                                             30 997               31 288

Koszt wytworzenia sprzedanych produktów i usług                                     16 662               16 439

Wartość sprzedanych towarów i materiałów                                            14 334               14 849

Zysk (strata) brutto ze sprzedaży                                                   16 089               18 096
Koszty sprzedaży                                                                    11 311               12 094
Koszty zarządu                                                                       2 115                2 069
Pozostałe przychody operacyjne                                   3                     910                  138
Pozostałe koszty operacyjne                                      3                   1 070                  914

Zysk (strata) z działalności operacyjnej                                             2 503                3 157

Przychody finansowe                                              4                     150                1 638
Koszty finansowe                                                 4                     151                1 603
Zysk/strata na sprzedaży całości lub części udziałów
jednostek zależnych                                                                  2 117                     -

Zysk (strata) przed opodatkowaniem                                                   4 619                3 192
Podatek dochodowy                                                                       (7)                 833

Zysk (strata) netto z działalności kontynuowanej                                     4 626                2 359

Działalność zaniechana                                                                    -                    -
Wynik netto z działalności zaniechanej                                                    -                    -
Zysk (strata) netto za okres sprawozdawczy, przypadający
                                                                                    4 626                2 359
na:
Jednostkę dominującą                                                                 4 626                2 359
Udziały niedające kontroli                                                                -                    -

Różnice kursowe z przeliczenia jednostek zagranicznych                              (2 512)                 703

Całkowite dochody ogółem                                                             2 114                3 062

Całkowite dochody ogółem, przypadające na:                                           2 114                3 062












#DONE
- add transform method to formula

#TODO
- move to bootstra-datepicker.js - show only months and yeras
- add some validations from timestamps, to accept only last day of month
- add financial year start data to company (some companies have shifted financial year)
    - financial_year_start_month = Column(Integer, default=1)

- take into account start month of financial year when calculating syntehtic
  records
- syntehtic records are calculated only wihtin single financial year
- add timestamp_start = timestamp - timerange

#THOUGHTS:
1)
- who should create records? where should be located logic concerning creating
  syntetic records? who should be responsible for records? who is the closetst
  to records and db? the answer is: 
- Record(Model)
- Ok, I understand it wil lbe static method?
- Yes, and what about its name? Have you got any ideas?
- I don't know yet, but I know what it should do.
- what exacly?
- Returns records when exsit in db, or create new syntethic records if possible.
- So, two separate functionalities? ARe you not violating SRP ?
- It seems I do. Better to split this into two methods: create_syntethic_record,
  and get record. But what if user would like to create synthetic record which
  already exists in db? Should we create new one?
- No, definitely not. Hymmm. What about function to check whether the record exist?
- It will be helpful, but very often user would like to get record regardless
  of its existance in db?
- So, what about the method get_or_create?
- No, I don't like this idea, we will never pass value and report.
- get_or_create_syntetic_suger?
- To long.
- get_or_generate?
- That's better. What are the synonyms for generate?
- create, make, produc, induce, form
- generate is the best. get_or_generate is ok.

2)
- synthetic records should be overridable

3) Synthetic records - When should they be generated?
- I don't know. There will be planty of possibilties. How to represent timerange and record types?

- How it will work ? 

User creates new dbrequest to upload one or planty records. Or even worse user
sends request to modify some old data. What about records that are deleted and
took part in creating synthetic records? FUCK. So many different problems which
should be solved with one simple solution:(

There are two possibilities:
- synthetic records are created simultaneously at some specific daytime
- synthetic records are created when sth has change in db (new record,
  modified record etc)
- synthetic records are created with every dbrequest => moderator accepts 
  request, new records are created, updated. It will work just like some 
  impulse started at given record and traverse newtork of formulas to find
  possible places to update records. Trigger changes. Sth like observer
  pattern. Record change, wha
- some kind of combination of above solutions?
- what about when someone update many records simultaneously

Single record scenario:

1. User creates request to create/update one record.
2. Moderator accepts the request.
3. Request is being executed and there is a result with instance of
   modified records.
4. Algorithm for creating synthetic records is being triggered with one 
   initial record.
4.1. Find all formulas involving type of initial record (reverse-formulas).
4.2. Extend 'space' formulas with 'time' formulas.
4.4. Filter computable formulas. 
4.5. Filter formulas for records that do not exist in db.
4.6. Execute formulas to create synthetic records.
4.7. Repeat the algorithm for synthetic records as initial records.
    - keep created records to prevent situation when one record will be created
      many times

Multiple records scenario:

1. User creates request to create/updaty many records.
2. Moderator accepts the request.
3. Request is being executed and there are some results with instances of
   modified records.
4. Algorithm for creating synthetic records is being triggered with many
   initial records.
4.1. Find all formulas involving type of initial records (reverse-formulas).
4.2. Filter computable formulas.
4.3. Filter distinct formulas in terms of left-hand side.
4.4. Filter formulas for records that do not exist in db.;
4.5. Execute formulas to create synthetic records.
4.6. Repeat the algorithm for synthetic records as initial records.
    - keep created records to prevent situation when one record will be created
      many times

The algorithm looks great but what about time formulas. There should be somehow
defined. 
- I do not want to treat space formulas differently than time formulas. They
  should have the same format. 
- How do you incorporate time into formulas? How? How? How?
- I do not want to keep these formulas in db.

1. Load formulas from database.

record.revformulas
- extend them by transformation

create wrapper for formula but not the model TimeRecordFormula, which adds
timerange

- you have to define timerange wihtin which the algorith will work - 12 months
- you have company and financial_year_start_month, you have record from specific month
- e.g.

9 months ended on 2015-9
- fiscal year starts at 7, so your timerange is 2015-07 - 2016-09
12 months ended on 2015-12
- fiscal year starts at 1, so your timerange is 2015-01 - 2015-12


class TimerangeRecordFormula:

    def __init__(self, formula, start, end):
        self.formula = formula
        self.start = start
        self.end = end
        
        
def extend_with_timerange(formula, start, end):
    return TimerangeRecordFormula(formula, start, end)
    
    
- load all records within given timerange
- add calcualbe fieldto record 
- start_date